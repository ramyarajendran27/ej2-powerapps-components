<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root"
    xmlns=""
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <!-- Chart Control properties -->
  <data name="SfChart" xml:space="preserve">
    <value>SfChart (28.1.33) Preview</value>
  </data>
  <data name="SfChart_Desc_Key" xml:space="preserve">
    <value>The EJ2 PowerApps Chart Component delivers dynamic and animated HTML5 graphs, seamlessly integrating real-time data for visually impactful presentations.</value>
  </data>

  <!-- Chart Datasource Properties -->
  <data name="DataSource" xml:space="preserve">
    <value>Data Source </value>
  </data>

  <data name="EnableDarkMode" xml:space="preserve">
    <value>Enable Dark Mode</value>
  </data>
  <data name="EnableDarkMode_Desc_Key" xml:space="preserve">
    <value>Toggle this option to switch the application interface to Dark Mode</value>
  </data>

  <!-- Chart Series & Title Properties -->
  <data name="Series" xml:space="preserve">
    <value>Series</value>
  </data>
  <data name="Series_Desc_Key" xml:space="preserve">
    <value>The configuration options for the chart's series allow you to customize how data is displayed. The dataSource property will be automatically updated based on your data. You can find the default series configuration in the JSON file located in the "components/charts/data" folder in the repository for reference.</value>
  </data>
  <data name="SeriesType" xml:space="preserve">
    <value>Series Type</value>
  </data>
  <data name="SeriesType_Desc_Key" xml:space="preserve">
    <value>Defines the global series type for the Chart code component. It will be applied to all series in Series property, if type not specified.</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Title_Desc_Key" xml:space="preserve">
    <value>Defines the title of the Chart code component.</value>
  </data>

  <!-- Chart Primary X Axis Property -->
  <data name="PrimaryXAxisType" xml:space="preserve">
    <value>Primary X AxisType</value>
  </data>
  <data name="PrimaryXAxisType_Desc_Key" xml:space="preserve">
    <value>Defines the type of the Chart component horizontal axis.</value>
  </data>
  <data name="EnableCrosshair" xml:space="preserve">
    <value>Enable Crosshair</value>
  </data>
  <data name="EnableCrosshair_Desc_Key" xml:space="preserve">
    <value>If set to true, crosshair line becomes visible.</value>
  </data>
  <data name="EnableTooltip" xml:space="preserve">
    <value>Enable Tooltip</value>
  </data>
  <data name="EnableTooltip_Desc_Key" xml:space="preserve">
    <value>If set to true, enables the tooltip for the data points.</value>
  </data>
  <data name="EnableCrosshairTooltip" xml:space="preserve">
    <value>Enable Crosshair Tooltip</value>
  </data>
  <data name="EnableCrosshairTooltip_Desc_Key" xml:space="preserve">
    <value>If set to true, enables the crosshair tooltip for the data points.</value>
  </data>
  <data name="EnableLegendVisibility" xml:space="preserve">
    <value>Enable Legend Visibility</value>
  </data>
  <data name="EnableLegendVisibility_Desc_Key" xml:space="preserve">
    <value>If set to true, the legend will be displayed for the chart.</value>
  </data>

  <!-- Chart Zoom Properties -->
  <data name="EnableMouseWheelZooming" xml:space="preserve">
    <value>Enable MouseWheel Zooming</value>
  </data>
  <data name="EnableMouseWheelZooming_Desc_Key" xml:space="preserve">
    <value>If set to true, chart can be zoomed by using mouse wheel.</value>
  </data>
  <data name="EnablePinchZooming" xml:space="preserve">
    <value>Enable Pinch Zooming</value>
  </data>
  <data name="EnablePinchZooming_Desc_Key" xml:space="preserve">
    <value>If to true, chart can be pinched to zoom in / zoom out.</value>
  </data>
  <data name="EnableSelectionZooming" xml:space="preserve">
    <value>Enable Selection Zooming</value>
  </data>
  <data name="EnableSelectionZooming_Desc_Key" xml:space="preserve">
    <value>If set to true, chart can be zoomed by a rectangular selecting region on the plot area.</value>
  </data>
  <data name="Height" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="Height_Desc_Key" xml:space="preserve">
    <value>Defines the height of the Chart code component. It specifies the height of the Chart when rendered in PowerApps table form.</value>
  </data>

  <!-- Chart Event Properties -->
  <data name="EventName" xml:space="preserve">
    <value>Event Name</value>
  </data>
  <data name="EventName_Desc_Key" xml:space="preserve">
    <value>Output event name when OnChange is triggered.</value>
  </data>
  <data name="OnError" xml:space="preserve">
    <value>OnError</value>
  </data>
  <data name="OnError_Desc_Key" xml:space="preserve">
    <value>Outputs error message when onError is triggered.</value>
  </data>
</root>