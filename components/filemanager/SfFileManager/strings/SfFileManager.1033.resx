<?xml version="1.0" encoding="utf-8"?>
<root>
    <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root"
        xmlns=""
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>

    <!-- FileManager Control properties -->
    <data name="SfFileManager" xml:space="preserve">
        <value>SfFileManager (28.1.33) Preview</value>
    </data>
    <data name="SfFileManager_Desc_Key" xml:space="preserve">
        <value>The EJ2 FileManager component in PowerApps allows users to efficiently manage files and folders in a user-friendly interface. it offers seamless navigation and file operations, enhancing the user experience within PowerApps environments.</value>
    </data>

    <!-- FileManager Properties -->
    <data name="FileSystemData" xml:space="preserve">
        <value>FileSystem Data </value>
    </data>
    <data name="EnableDarkMode" xml:space="preserve">
        <value>Enable Dark Mode</value>
    </data>
    <data name="EnableDarkMode_Desc_Key" xml:space="preserve">
        <value>Toggle this option to switch the application interface to Dark Mode</value>
    </data>
    <data name="FileManagerConfig" xml:space="preserve">
        <value>FileManager Config</value>
    </data>
    <data name="FileManagerConfig_Desc_Key" xml:space="preserve">
        <value>The configuration settings for the FileManager component allow you to customize its features and behavior. For reference, you can find the default configuration in the JSON file located in the "components/filemanager/data" folder in the repository.</value>
    </data>
    <data name="CssClass" xml:space="preserve">
        <value>Css Class</value>
    </data>
    <data name="CssClass_Desc_Key" xml:space="preserve">
        <value>Specifies the root CSS class of the file manager that allows you to customize the appearance by overriding the styles.</value>
    </data>
    <data name="Path" xml:space="preserve">
        <value>Path</value>
    </data>
    <data name="Path_Desc_Key" xml:space="preserve">
        <value>Specifies the current path of the file manager.</value>
    </data>
    <data name="RootAliasName" xml:space="preserve">
        <value>Root Alias Name</value>
    </data>
    <data name="RootAliasName_Desc_Key" xml:space="preserve">
        <value>Specifies the root folder alias name in file manager.</value>
    </data>
    <data name="SortBy" xml:space="preserve">
        <value>Sort By</value>
    </data>
    <data name="SortBy_Desc_Key" xml:space="preserve">
        <value>Specifies the field name being used as the sorting criteria to sort the files of the file manager component.</value>
    </data>
    <data name="SortOrder" xml:space="preserve">
        <value>Sort Order</value>
    </data>
    <data name="SortOrder_Desc_Key" xml:space="preserve">
        <value>Specifies a value that indicates whether the folders and files are sorted in the ascending or descending order, or they are not sorted at all.</value>
    </data>
    <data name="View" xml:space="preserve">
        <value>View</value>
    </data>
    <data name="View_Desc_Key" xml:space="preserve">
        <value>Specifies the initial view of the file manager. With the help of this property, initial view can be changed to details or large icons view.</value>
    </data>
    <data name="AllowMultiSelection" xml:space="preserve">
        <value>Allow Multi Selection</value>
    </data>
    <data name="AllowMultiSelection_Desc_Key" xml:space="preserve">
        <value>Enables or disables the multiple files selection of the file manager.</value>
    </data>
    <data name="EnableVirtualization" xml:space="preserve">
        <value>Enable Virtualization</value>
    </data>
    <data name="EnableVirtualization_Desc_Key" xml:space="preserve">
        <value>Gets or sets a value that enables/disables the virtualization feature of the File Manager. When enabled, the File Manager will only load a subset of files and folders based on the size of the view port, with the rest being loaded dynamically as the user scrolls vertically through the list. This can improve performance when dealing with a large number of files and folders, as it reduces the initial load time and memory usage.</value>
    </data>
    <data name="ShowFileExtension" xml:space="preserve">
        <value>Show File Extension</value>
    </data>
    <data name="ShowFileExtension_Desc_Key" xml:space="preserve">
        <value>Shows or hides the file extension in file manager.</value>
    </data>
    <data name="ShowItemCheckBoxes" xml:space="preserve">
        <value>Show Item CheckBoxes</value>
    </data>
    <data name="ShowItemCheckBoxes_Desc_Key" xml:space="preserve">
        <value>Gets or sets a boolean value that determines whether to display checkboxes in the file manager. If enabled, checkboxes are shown for files or folders on hover.</value>
    </data>
    <data name="ShowThumbnail" xml:space="preserve">
        <value>Show Thumbnail</value>
    </data>
    <data name="ShowThumbnail_Desc_Key" xml:space="preserve">
        <value>Shows or hides the thumbnail images in largeicons view.</value>
    </data>
    <data name="Height" xml:space="preserve">
        <value>Height</value>
    </data>
    <data name="Height_Desc_Key" xml:space="preserve">
        <value>Defines the height of the FileManager code component. It specifies the height of the FileManager when rendered in PowerApps table form.</value>
    </data>
    <data name="NoDataSource_Message" xml:space="preserve">
        <value>There is no data available to display at the moment.</value>
    </data>

    <!-- FileManager Event Properties -->
    <data name="EventName" xml:space="preserve">
        <value>Event Name</value>
    </data>
    <data name="EventName_Desc_Key" xml:space="preserve">
        <value>Output event name when OnChange is triggered.</value>
    </data>
    <data name="OnError" xml:space="preserve">
        <value>On Error Event</value>
    </data>
    <data name="OnError_Desc_Key" xml:space="preserve">
        <value>Outputs error message when onError is triggered.</value>
    </data>
</root>