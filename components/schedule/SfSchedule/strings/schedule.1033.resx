<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root"
    xmlns=""
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <!-- Schedule Control properties -->
  <data name="SfSchedule" xml:space="preserve">
    <value>SfSchedule (28.1.33) Preview</value>
  </data>
  <data name="SfSchedule_Desc_Key" xml:space="preserve">
    <value>Represents the Schedule component that displays a list of events scheduled against specific date and timings, thus helping us to plan and manage it properly.</value>
  </data>

  <!-- Schedule Datasource Property -->
  <data name="DataSource" xml:space="preserve">
    <value>Data Source </value>
  </data>

  <data name="EnableDarkMode" xml:space="preserve">
    <value>Enable Dark Mode</value>
  </data>
  <data name="EnableDarkMode_Desc_Key" xml:space="preserve">
    <value>Toggle this option to switch the application interface to Dark Mode</value>
  </data>

  <!-- Schedule Config Property -->
  <data name="ScheduleConfig" xml:space="preserve">
    <value>Schedule Config</value>
  </data>
  <data name="ScheduleConfig_Desc_Key" xml:space="preserve">
    <value>The configuration settings for the Schedule component allow you to customize its features and behavior. For reference, you can find the default configuration in the JSON file located in the "components/schedule/data" folder in the repository.</value>
  </data>

  <!-- Schedule Properties -->
  <data name="CurrentView" xml:space="preserve">
    <value>Current View</value>
  </data>
  <data name="CurrentView_Desc_Key" xml:space="preserve">
    <value>To set the active view on the scheduler, use the currentView property which initially loads the specified view option.</value>
  </data>
  <data name="FirstDayOfWeek" xml:space="preserve">
    <value>First Day Of Week</value>
  </data>
  <data name="FirstDayOfWeek_Desc_Key" xml:space="preserve">
    <value>This option allows the user to set the first day of a week on Schedule. It should be based on the locale set to it and each culture defines its own first day of week values. If needed, the user can set it manually on his own by defining the value through this property. It usually accepts the integer values, whereby 0 is always denoted as Sunday, 1 as Monday and so on.</value>
  </data>
  <data name="SelectedDate" xml:space="preserve">
    <value>Selected Date</value>
  </data>
  <data name="SelectedDate_Desc_Key" xml:space="preserve">
    <value>The selectedDate property in the Schedule marks the active date, typically defaulting to the current system date.</value>
  </data>
  <data name="TimeZone" xml:space="preserve">
    <value>TimeZone</value>
  </data>
  <data name="TimeZone_Desc_Key" xml:space="preserve">
    <value>Assigning specific timezones to schedules ensures accurate event display; initially processed with the system timezone, it's advisable to set a specific timezone when binding to remote data services for consistent event timing, accepting valid IANA timezone names.</value>
  </data>
  <data name="MinDate" xml:space="preserve">
    <value>MinDate</value>
  </data>
  <data name="MinDate_Desc_Key" xml:space="preserve">
    <value>To define the minimum date on the Schedule, minDate property can be defined. Usually, it defaults to the 1900/0/1.</value>
  </data>
  <data name="MaxDate" xml:space="preserve">
    <value>MaxDate</value>
  </data>
  <data name="MaxDate_Desc_Key" xml:space="preserve">
    <value>To define the maximum date on the Schedule, maxDate property can be defined. Usually, it defaults to the 2099/1/31.</value>
  </data>
  <data name="TimeFormat" xml:space="preserve">
    <value>Time Format</value>
  </data>
  <data name="TimeFormat_Desc_Key" xml:space="preserve">
    <value>By default, Schedule follows the time-format as per the default culture assigned to it. It is also possible to manually set specific time format by using the timeFormat property.</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>Date Format</value>
  </data>
  <data name="DateFormat_Desc_Key" xml:space="preserve">
    <value>By default, Schedule follows the date-format as per the default culture assigned to it. It is also possible to manually set specific date format by using the dateFormat property.</value>
  </data>
  <data name="StartHour" xml:space="preserve">
    <value>Start Hour</value>
  </data>
  <data name="StartHour_Desc_Key" xml:space="preserve">
    <value>It is used to specify the starting hour, from which the Schedule starts to display. It accepts the time string in a short skeleton format and also, hides the time beyond the specified start time.</value>
  </data>
  <data name="EndHour" xml:space="preserve">
    <value>End Hour</value>
  </data>
  <data name="EndHour_Desc_Key" xml:space="preserve">
    <value>It is used to specify the end hour, at which the Schedule ends. It too accepts the time string in a short skeleton format.</value>
  </data>
  <data name="ShowQuickInfo" xml:space="preserve">
    <value>Show Quick Info</value>
  </data>
  <data name="ShowQuickInfo_Desc_Key" xml:space="preserve">
    <value>The quick popup with cell or event details appears on single click, defaulting to 'true'.</value>
  </data>
  <data name="showHeaderBar" xml:space="preserve">
    <value>show HeaderBar</value>
  </data>
  <data name="showHeaderBar_Desc_Key" xml:space="preserve">
    <value>When set to false, hides the Schedule's header bar from the UI, which typically includes date and view navigation options, allowing users to add custom items.</value>
  </data>
  <data name="ShowWeekend" xml:space="preserve">
    <value>Show Weekend</value>
  </data>
  <data name="ShowWeekend_Desc_Key" xml:space="preserve">
    <value>When set to false, it hides the weekend days of a week from the Schedule. The days which are not defined in the working days collection are usually treated as weekend days.</value>
  </data>
  <data name="ShowWeekNumber" xml:space="preserve">
    <value>Show Week Number</value>
  </data>
  <data name="ShowWeekNumber_Desc_Key" xml:space="preserve">
    <value>When set to true, displays the week number of the current view date range. By default, it is set to false.</value>
  </data>
  <data name="ShowTimeIndicator" xml:space="preserve">
    <value>Show Time Indicator</value>
  </data>
  <data name="ShowTimeIndicator_Desc_Key" xml:space="preserve">
    <value>When set to false, hides the current time indicator from the Schedule. Otherwise, it visually depicts the live current system time appropriately on the user interface.</value>
  </data>
  <data name="RowAutoHeight" xml:space="preserve">
    <value>Row Auto Height</value>
  </data>
  <data name="RowAutoHeight_Desc_Key" xml:space="preserve">
    <value>when set to true, allows the height of the work-cells to adjust automatically based on the number of appointments present in those time ranges.</value>
  </data>

  <!-- Schedule Events Property -->
  <data name="EventName" xml:space="preserve">
    <value>Event Name</value>
  </data>
  <data name="EventName_Desc_Key" xml:space="preserve">
    <value>Output event name when OnChange is triggered.</value>
  </data>
  <data name="OnError" xml:space="preserve">
    <value>OnError</value>
  </data>
  <data name="OnError_Desc_Key" xml:space="preserve">
    <value>Outputs error message when onError is triggered.</value>
  </data>
</root>